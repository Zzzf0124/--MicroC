[ ]{0: LDARGS}                    //命令行参数 main(int i)  i默认初始值0
[ 0 ]{1: CALL 0 5}                //调用main，返回 返回地址和oldbp
[ 0 4 -999 ]{5: INCSP 1}          //gei int n 开栈，放一个初始值0
           n
           ↓
[ 0 4 -999 0 ]{7: GETBP}          //获得基地址  bp=3
[ 0 4 -999 0 3 ]{8: CSTI 0}       //  n=0
[ 0 4 -999 0 3 0 ]{10: ADD}       //bp+0，获取第一个参数的位置
[ 0 4 -999 0 3 ]{11: CSTI 0}      //0入栈
[ 0 4 -999 0 3 0 ]{13: STI}       //当前sp=5，sp-1的值为3，将位置3和sp-1位置的值赋为0       
[ 0 4 -999 0 0 ]{14: INCSP -1}    //释放一个空间
[ 0 4 -999 0 ]{16: GETBP}         //获取基地址3
[ 0 4 -999 0 3 ]{17: CSTI 0}      //0入栈
[ 0 4 -999 0 3 0 ]{19: ADD}       //bp+0,第一个参数
[ 0 4 -999 0 3 ]{20: LDI}         //获取位置3上的额值0
[ 0 4 -999 0 0 ]{21: PRINTI}      //输出栈顶的值0
0 [ 0 4 -999 0 0 ]{22: INCSP -1}
           n
           ↓
[ 0 4 -999 0 ]{24: GETBP}
[ 0 4 -999 0 3 ]{25: CSTI 0}
[ 0 4 -999 0 3 0 ]{27: ADD}
[ 0 4 -999 0 3 ]{28: DUP}         //复制栈顶元素
[ 0 4 -999 0 3 3 ]{29: LDI}       //获取位置3处的值0  <- i
[ 0 4 -999 0 3 0 ]{30: SWAP}      //交换sp 和 sp-1 的值
[ 0 4 -999 0 0 3 ]{31: DUP}       
[ 0 4 -999 0 0 3 3 ]{32: LDI}     
[ 0 4 -999 0 0 3 0 ]{33: CSTI 1}  //压入1
[ 0 4 -999 0 0 3 0 1 ]{35: ADD}   //0+1
[ 0 4 -999 0 0 3 1 ]{36: STI}     //sp-1位置值3，将sp-1和位置3的值变成1  <- n++
[ 0 4 -999 1 0 1 ]{37: INCSP -1}  //释放空间
[ 0 4 -999 1 0 ]{39: INCSP -1}
[ 0 4 -999 1 ]{41: INCSP 0}
[ 0 4 -999 1 ]{43: GETBP}
[ 0 4 -999 1 3 ]{44: CSTI 0}
[ 0 4 -999 1 3 0 ]{46: ADD}
[ 0 4 -999 1 3 ]{47: LDI}
[ 0 4 -999 1 1 ]{48: CSTI 3}
[ 0 4 -999 1 1 3 ]{50: LT}        //比较sp-1 和 sp 的值，如果为true，返回1，否则返回0，将值放在sp-1
[ 0 4 -999 1 1 ]{51: IFNZRO 16}   //如果不是0,跳转16  即再次循环
[ 0 4 -999 1 ]{16: GETBP}
[ 0 4 -999 1 3 ]{17: CSTI 0}
[ 0 4 -999 1 3 0 ]{19: ADD}
[ 0 4 -999 1 3 ]{20: LDI}
[ 0 4 -999 1 1 ]{21: PRINTI}
1 [ 0 4 -999 1 1 ]{22: INCSP -1}
[ 0 4 -999 1 ]{24: GETBP}
[ 0 4 -999 1 3 ]{25: CSTI 0}
[ 0 4 -999 1 3 0 ]{27: ADD}
[ 0 4 -999 1 3 ]{28: DUP}
[ 0 4 -999 1 3 3 ]{29: LDI}
[ 0 4 -999 1 3 1 ]{30: SWAP}
[ 0 4 -999 1 1 3 ]{31: DUP}
[ 0 4 -999 1 1 3 3 ]{32: LDI}
[ 0 4 -999 1 1 3 1 ]{33: CSTI 1}
[ 0 4 -999 1 1 3 1 1 ]{35: ADD}
[ 0 4 -999 1 1 3 2 ]{36: STI}
[ 0 4 -999 2 1 2 ]{37: INCSP -1}
[ 0 4 -999 2 1 ]{39: INCSP -1}
[ 0 4 -999 2 ]{41: INCSP 0}
[ 0 4 -999 2 ]{43: GETBP}
[ 0 4 -999 2 3 ]{44: CSTI 0}
[ 0 4 -999 2 3 0 ]{46: ADD}
[ 0 4 -999 2 3 ]{47: LDI}
[ 0 4 -999 2 2 ]{48: CSTI 3}
[ 0 4 -999 2 2 3 ]{50: LT}
[ 0 4 -999 2 1 ]{51: IFNZRO 16}
[ 0 4 -999 2 ]{16: GETBP}
[ 0 4 -999 2 3 ]{17: CSTI 0}
[ 0 4 -999 2 3 0 ]{19: ADD}
[ 0 4 -999 2 3 ]{20: LDI}
[ 0 4 -999 2 2 ]{21: PRINTI}
2 [ 0 4 -999 2 2 ]{22: INCSP -1}
[ 0 4 -999 2 ]{24: GETBP}
[ 0 4 -999 2 3 ]{25: CSTI 0}
[ 0 4 -999 2 3 0 ]{27: ADD}
[ 0 4 -999 2 3 ]{28: DUP}
[ 0 4 -999 2 3 3 ]{29: LDI}
[ 0 4 -999 2 3 2 ]{30: SWAP}
[ 0 4 -999 2 2 3 ]{31: DUP}
[ 0 4 -999 2 2 3 3 ]{32: LDI}
[ 0 4 -999 2 2 3 2 ]{33: CSTI 1}
[ 0 4 -999 2 2 3 2 1 ]{35: ADD}
[ 0 4 -999 2 2 3 3 ]{36: STI}
[ 0 4 -999 3 2 3 ]{37: INCSP -1}
[ 0 4 -999 3 2 ]{39: INCSP -1}
[ 0 4 -999 3 ]{41: INCSP 0}
[ 0 4 -999 3 ]{43: GETBP}
[ 0 4 -999 3 3 ]{44: CSTI 0}
[ 0 4 -999 3 3 0 ]{46: ADD}
[ 0 4 -999 3 3 ]{47: LDI}
[ 0 4 -999 3 3 ]{48: CSTI 3}
[ 0 4 -999 3 3 3 ]{50: LT}
[ 0 4 -999 3 0 ]{51: IFNZRO 16}
[ 0 4 -999 3 ]{53: INCSP -1}
[ 0 4 -999 ]{55: RET -1}
[ 0 -999 ]{4: STOP}